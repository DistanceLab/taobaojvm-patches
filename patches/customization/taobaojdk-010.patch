diff -r 9a3b2365c8a8 src/share/vm/gc_implementation/concurrentMarkSweep/concurrentMarkSweepGeneration.cpp
--- a/src/share/vm/gc_implementation/concurrentMarkSweep/concurrentMarkSweepGeneration.cpp	Mon Dec 19 19:06:31 2011 +0800
+++ b/src/share/vm/gc_implementation/concurrentMarkSweep/concurrentMarkSweepGeneration.cpp	Mon Dec 19 20:17:50 2011 +0800
@@ -436,7 +436,7 @@
   // If a concurrent mode failure occurred recently, we want to be
   // more conservative and halve our expected time_until_cms_gen_full()
   if (work > deadline) {
-    if (Verbose && PrintGCDetails) {
+    if (PrintGCReason || Verbose && PrintGCDetails) {
       gclog_or_tty->print(
         " CMSCollector: collect because of anticipated promotion "
         "before full %3.7f + %3.7f > %3.7f ", cms_duration(),
@@ -1476,8 +1476,8 @@
 
 bool CMSCollector::shouldConcurrentCollect() {
   if (_full_gc_requested) {
-    if (Verbose && PrintGCDetails) {
-      gclog_or_tty->print_cr("CMSCollector: collect because of explicit "
+    if (PrintGCReason || Verbose && PrintGCDetails) {
+      gclog_or_tty->print_cr("CMSCollector: collect because of explicit"
                              " gc request (or gc_locker)");
     }
     return true;
@@ -1533,7 +1533,7 @@
       // this branch will not fire after the first successful CMS
       // collection because the stats should then be valid.
       if (_cmsGen->occupancy() >= _bootstrap_occupancy) {
-        if (Verbose && PrintGCDetails) {
+        if (PrintGCReason || Verbose && PrintGCDetails) {
           gclog_or_tty->print_cr(
             " CMSCollector: collect for bootstrapping statistics:"
             " occupancy = %f, boot occupancy = %f", _cmsGen->occupancy(),
@@ -1550,7 +1550,7 @@
   // XXX We need to make sure that the gen expansion
   // criterion dovetails well with this. XXX NEED TO FIX THIS
   if (_cmsGen->should_concurrent_collect()) {
-    if (Verbose && PrintGCDetails) {
+    if (PrintGCReason || Verbose && PrintGCDetails) {
       gclog_or_tty->print_cr("CMS old gen initiated");
     }
     return true;
@@ -1563,7 +1563,7 @@
   assert(gch->collector_policy()->is_two_generation_policy(),
          "You may want to check the correctness of the following");
   if (gch->incremental_collection_will_fail(true /* consult_young */)) {
-    if (Verbose && PrintGCDetails) {
+    if (PrintGCReason || Verbose && PrintGCDetails) {
       gclog_or_tty->print("CMSCollector: collect because incremental collection will fail ");
     }
     return true;
@@ -1572,7 +1572,7 @@
   if (CMSClassUnloadingEnabled && _permGen->should_concurrent_collect()) {
     bool res = update_should_unload_classes();
     if (res) {
-      if (Verbose && PrintGCDetails) {
+      if (PrintGCReason || Verbose && PrintGCDetails) {
         gclog_or_tty->print_cr("CMS perm gen initiated");
       }
       return true;
diff -r 9a3b2365c8a8 src/share/vm/memory/genCollectedHeap.cpp
--- a/src/share/vm/memory/genCollectedHeap.cpp	Mon Dec 19 19:06:31 2011 +0800
+++ b/src/share/vm/memory/genCollectedHeap.cpp	Mon Dec 19 20:17:50 2011 +0800
@@ -471,6 +471,9 @@
   assert(max_level < n_gens(), "sanity check");
 
   if (GC_locker::check_active_before_gc()) {
+    if (PrintGCReason) {
+      gclog_or_tty->print_cr("GenCollectedHeap: postponed collection because GC_locker is active");
+    }
     return; // GC is disabled (e.g. JNI GetXXXCritical operation)
   }
 
@@ -481,13 +484,20 @@
 
   const size_t perm_prev_used = perm_gen()->used();
 
+  bool gc_cause_printed = false;
   if (PrintHeapAtGC) {
     Universe::print_heap_before_gc();
     if (Verbose) {
       gclog_or_tty->print_cr("GC Cause: %s", GCCause::to_string(gc_cause()));
+      gc_cause_printed = true;
     }
   }
 
+  if (PrintGCReason && !gc_cause_printed) {
+    gclog_or_tty->print_cr("GC Cause: %s", GCCause::to_string(gc_cause()));
+    gc_cause_printed = true;
+  }
+
   {
     FlagSetting fl(_is_gc_active, true);
 
diff -r 9a3b2365c8a8 src/share/vm/runtime/globals_ext.hpp
--- a/src/share/vm/runtime/globals_ext.hpp	Mon Dec 19 19:06:31 2011 +0800
+++ b/src/share/vm/runtime/globals_ext.hpp	Mon Dec 19 20:17:50 2011 +0800
@@ -30,7 +30,9 @@
 #define TAOBAO_FLAGS(develop, develop_pd, product, product_pd, diagnostic, experimental, notproduct, manageable, product_rw, lp64_product) \
   product(intx, ArrayAllocationWarningSize, 512*M,                          \
           "array allocation with size larger than this (bytes) will be "    \
-          "given a warning")
+          "given a warning")                                                \
+  manageable(bool, PrintGCReason, false,                                    \
+          "Print the reason of triggering a garbage collection cycle")
 // add new Taobao-specific VM flags here
 
 TAOBAO_FLAGS(DECLARE_DEVELOPER_FLAG, DECLARE_PD_DEVELOPER_FLAG,